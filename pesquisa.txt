http://dontpad.com/auladdmifpr


01) O que é e para que serve tratamento de erros?
    É algo essencial em qualquer software, e principalmente em sistemas embarcados, onde precisamos ter a garantai de um software robusto, confiável e aprova de falhas.

02) Quais são as formas de tratamentos de erros?
    End catch, Try catch.

03) Qual a difereça entre erro e exceção? 
    Erro é uma situação que ocorre devido à indisponibilidade de recursos do sistema e exceção é um problema que ocorre quando um programa é executado.

04) Qual a diferença entre excessão implícita (contornável) e explícita (incontornável)? 
    Implícitas são exceções que não precisam de tratamento e demonstram serem contornáveis e explícitas são exceções que precisam ser tratadas e que apresentam condições incontornáveis.
   
05) O que são: (1) throwables; (2) Checked Exception; e (3) Unchecked (Runtime)?
    Throwables são formações de erros, Checked Exception são erros que acontecem fora do controle do programa, mas que devem ser tratados pelo desenvolvedor para o programa funcionar e Uncheked são erros que podem ser evitados se forem tratados e analisados pelo desenvolvedor. Caso haja um tratamento para esse tipo de erro, o programa acaba parando em tempo de execução (Runtime).

06) Quais são os tratamentos de erros existentes no Dart?
    Try/Catch, On/Finally

07) Quais são as principais exceções existentes no Dart?
    DeferredLoadException, FormatException, IntegerDivisionByZeroException, IOException, IsolateSpawnException e Timeout.

08) O que é e como funciona o try/catch? Em que caso devemos utilizar? Há uma camada da aplicação correta em utilizá-lo? Exemplifique.
    As declarações try...catch marcam um bloco de declarações para testar (try),  e especifica uma resposta, caso uma exceção seja lançada.
    Exemplo:
    try {
   	try_statements
    }
    [catch (exception_var_1 if condition_1) {
   	catch_statements_1
    }]

    [catch (exception_var_2) {
   	catch_statements_2 
    }]
    [finally {
   	finally_statements
    }]

09) O que é e como funciona o on e final no tratamento de erros? Em que caso devemos utilizar? Há uma camada da aplicação correta em utilizá-lo? Exemplifique.
    A On Error instrução é usada no tratamento de erros não estruturado e pode ser usada em vez de manipulação de exceção estruturada. A manipulação de exceção estruturada é criada no .net, geralmente é mais eficiente e, portanto, é recomendada ao lidar com erros de tempo de execução em seu aplicativo. Exemplo: On Error { GoTo [ line | 0 | -1 ] | Resume Next }

10) O que é e como funciona o rethrow? Em que caso devemos utilizar? Exemplifique.
    Cria um UnaryExpression que representa um relançamento de uma exceção. Exemplo: public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);

11) No try/catch, o que é captura de erros? Como é realizada - sintaxe? Quais são os tipos de capturas possíveis? Quais são as diferenças? 
    Os constructos TRY...CATCH capturam erros não tratados de procedimentos armazenados nem gatilhos executados pelo código do bloco TRY. 

12) Explique e exemplifique o uso das cláusulas on e finally no bloco try-cath. 
    On the block é usado quando há 100% de certeza de que tipo de exceção será lançada e a parte final é sempre executada, mas não é obrigatória.

13) É possível criar exceções específicas? Se sim, em que caso podem ser utilizas? Quais são os cuidados que devemos ter. Exemplifique.
    Sim. Quando ocorre uma exceção, ela é passada para cima na pilha e, a cada bloco catch, é dada a oportunidade de tratá-la. A ordem das instruções catch é importante.

14) Implemente o try-catch (com relevância) nas funções do seu projeto – pelo menos 5 funções. Faça o tratamento de erro específico e geral. 

15) Analise o seu projeto e crie exceções específicas que facilite a localização e a manutenção do projeto.

16) O que é e para que serve o Either? Qual a relação e qual a diferença com o try-cath? Faça um exemplo no contexto do seu projeto.
    Either é um tratamento de erro. 

